/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit'

/* Instruments */
// import { incrementAsync } from './thunks'

const initialState: ScrollSliceState = {}

export const scrollSlice = createSlice({
  name: 'scroll',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    disableScroll: (state) => {
      state.disableScroll = true
    },
    enableScroll: (state) => {
      state.disableScroll = false
    },
    setScrollDisabled: (state, action: PayloadAction<boolean>) => {
      state.disableScroll = action.payload
    },
    hideScrollbar: (state) => {
      state.hideScrollbar = true
    },
    showScrollbar: (state) => {
      state.hideScrollbar = false
    },
    setSmoothScroll: (state, action: PayloadAction<boolean>) => {
      state.smoothScroll = action.payload
    },
    setKeepScroll: (state, action: PayloadAction<boolean>) => {
      state.keepScroll = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading'
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle'
  //       state.value += action.payload
  //     })
  // },
})

export const { hideScrollbar, showScrollbar, setScrollDisabled, setSmoothScroll, setKeepScroll } = scrollSlice.actions

/* Types */
export interface ScrollSliceState {
  /**
   * 禁用滚动。
   */
  disableScroll?: boolean
  /**
   * 隐藏滚动条。
   */
  hideScrollbar?: boolean
  /**
   * 开启平滑滚动。
   */
  smoothScroll?: boolean
  /**
   * 保持滚动位置。
   */
  keepScroll?: boolean
}
